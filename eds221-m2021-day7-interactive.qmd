---
title: "eds221-m2021-day7-interactive"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(lubridate)
```

```{r}
rm(list = ls())
```

# data wrangling refresh
## pt 1

```{r}
pengu <- penguins %>% 
  select(-year, -sex) %>% 
  mutate(body_mass_kg = body_mass_g * 0.001) %>% 
  rename(location = island)
```

## pt 2
```{r}
# for the na part, can also do
# & !is.na(flipper_length_mm)
pengo <- penguins %>% 
  filter(species == "Adelie") %>% 
  filter(is.na(flipper_length_mm) == FALSE) %>% 
  group_by(sex) %>% 
  summarize(
    mean_flipper = mean(flipper_length_mm, na.rm = TRUE), 
    sd_flipper = sd(flipper_length_mm, na.rm = TRUE), 
    sample_size = n())
```

# wrangling continued
## insert tables
```{r}
animals <- tibble::tribble(
  ~location,   ~species,  ~maturity,
   "lagoon",   "bobcat",    "adult",
    "bluff",   "coyote", "juvenile",
    "creek",      "fox",    "adult",
     "oaks", "squirrel", "juvenile",
    "bluff",   "bobcat",    "adult"
  )

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )


```

## practicing joins
```{r}
full_jn <- full_join(animals, sites)
left_jn <- left_join(animals, sites)
right_jn <- right_join(animals, sites)
inner_jn <- inner_join(animals, sites)
semi_jn <- semi_join(animals, sites)
anti_jn <- anti_join(animals, sites)
```

## demonstrates that semi join is just a simple way of doing filtering
```{r}
semi_join_test <- animals %>% filter(location %in% sites$location)
```

## so is anti join
```{r}
anti_join_test <- animals %>% filter(!location %in% sites$location)
```

## more experimentation
```{r}
# this one breaks if you try to run it twice
sites <- sites %>% rename(place = location)


test_join <- full_join(animals, sites, by = (join_by("location" == "place")))
```

# experimenting with lubridate
## make sure u use the right function according to format of date
```{r}

my_date <- "03-05-1998"
lubridate::mdy(my_date)

my_date <- "11/7/2003"
mdy(my_date)

my_date <- "08-Jun-1991"
dmy(my_date)

my_date <- "19960518"
ymd(my_date)

# should make class of my_date read "date"
my_date <- ymd(my_date)
class(my_date)
```

# now we play with times
```{r}
time <- "2020-08-12 11:18"
time <- lubridate::ymd_hm(time)
class(time)
```

# can input timezone by location
```{r}
with_tz(time, "America/Los_Angeles")
with_tz(time, "Australia/Sydney")
```

```{r}
my_time <- ymd_hms(time)
week(my_time)
day(my_time)
hour(my_time)
minute(my_time)
second(my_time)
```

## sys.time is time according to ur system
```{r}
comp_time_start <- Sys.time()
comp_time_end <- Sys.time()

comp_time_end - comp_time_start
```

## urchin counts tribble
```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)
```

## convert data column into iso 8601
## add columns: year, month, day
```{r}
urchin_counts_ymd <- urchin_counts %>% mutate(date = lubridate::mdy(date)) %>% 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```

## summarize by counts per year
```{r}
urchin_counts_by_year <- urchin_counts_ymd %>% 
  group_by(year) %>% 
  summarize(total = n())
```

## whatever the fuck this is
```{r}
day_1 <- lubridate::ymd("2020-01-06")
day_2 <- lubridate::ymd("2020-05-18")
day_3 <- lubridate::ymd("2020-05-19")

# Create a time interval
time_interval <- interval(day_1, day_2)

# Check the length in weeks
time_length(time_interval, "week")
```


```{r}
time_length(interval(day_2, day_3), "year")
```

# play with strings
```{r}
my_string <- "Teddy loves eating salmon and socks."

# Does the pattern "love" exist within the string?
my_string %>% str_detect("love")
```

```{r}
# Does the pattern "pup" exist within the string?
my_string %>% str_detect("pup")
```

```{r}
my_string <- c("burrito", "fish taco", "Taco salad")

# Does the vector element contain the pattern "fish"?
my_string %>% str_detect("fish")
```

```{r}
skywalkers <- starwars %>% filter(str_detect(name, "Skywalker"))

skywalkers
```

```{r}
firewalkers <- starwars %>% mutate(name = str_replace(name, pattern = "Sky", replacement = "Fire"))

firewalkers
```

## both of these strips strings of spaces

## but trim only strips on the end
```{r}
feedback <- c(" i sharted    some nachos", "Wednesday morning   ")

str_squish(feedback)
str_trim(feedback)
```

## other string modifiers
```{r}
str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)

str_count(feedback, pattern = "nachos")
```

